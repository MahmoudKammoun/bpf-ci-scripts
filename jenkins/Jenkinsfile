#!groovy

def sendNotification(prefix, recipientList) {
  String test_results = new File("result.txt").text

  emailext (
      to: "${recipientList}",
      subject: "${prefix}${currentBuild.fullDisplayName}",
      body: "Wall of text at ${env.BUILD_URL}consoleFull\n\n"+
      "On tree ${env.GIT_URL}\n"+
      "On branch ${env.GIT_BRANCH}\n"+
      "Using commit ${env.GIT_COMMIT}\n"+
      "Using builder ${env.NODE_NAME}\n"+
      "\n\n${test_results}",
      )
}

pipeline {
    agent {
      label 'vagrant'
    }
    options {
      timeout(time: 70, unit: 'MINUTES')
    }
    stages {
      stage ('Bootstrap kernel') {
        environment {
          VM_MEMORY = '4096'
          VM_CPUS = '4'
        }
        steps {
            sh 'git clone https://github.com/cilium/bpf-ci-scripts workspace || true'
            sh 'git -C workspace checkout . || true'
            sh 'git -C workspace pull origin master || true'
            sh 'cp workspace/Vagrantfile Vagrantfile'
            sh 'vagrant plugin install vagrant-reload'
            sh 'vagrant plugin install vagrant-scp'
            sh 'vagrant up'
        }
      }
      stage ('LLVM nightly') {
        steps {
          sh 'vagrant ssh -c "workspace/workspace/scripts/3_get_llvm_snapshot.sh"'
        }
      }
      stage ('Cilium tests (skipped)') {
        steps {
            sh 'vagrant ssh -c "workspace/workspace/scripts/4_run_integration.sh" || true'
        }
      }
      stage ('Install bpftool') {
        steps {
            sh 'vagrant ssh -c "workspace/workspace/scripts/5_install_bpftool.sh ~/workspace"'
        }
      }
      stage ('BPF selftest') {
        steps {
            sh 'vagrant ssh -c "workspace/workspace/scripts/5_run_selftest.sh ~/workspace"'
            sh 'vagrant scp :/tmp/*_result.txt . || true'
            sh 'cat *_result.txt > result.txt'
            //step([$class: "TapPublisher", testResults: "*_result.txt"])
        }
      }
    }
    post {
      always {
	sh './workspace/scripts/6_artifacts.sh'
	sh './workspace/scripts/6_cleanup.sh'
	archiveArtifacts artifacts: 'ARTIFACTS/**', fingerprint: true, allowEmptyArchive: true
      }
      failure {
        sendNotification("Build failure: ", "alexander@alemayhu.com,daniel@iogearbox.net")
      }
      success {
        sendNotification("Build success: ", "alexander@alemayhu.com,daniel@iogearbox.net")
      }
    }
}
